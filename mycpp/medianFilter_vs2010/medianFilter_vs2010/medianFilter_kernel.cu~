#include "medianFilter_kernel.h"

#include "../common/book.h"

extern "C" void medianFilter(
        	const unsigned char *h_src,
        	unsigned char *h_dst,
        	unsigned int w,
        	unsigned int h,
        	unsigned int r)
{
unsigned int size  = w*h*sizeof(unsigned int);
unsigned int csize = sizeof(unsigned int);
unsigned int* h_src_d, h_dst_d;

// Transfer h_src
cudaMalloc((void**) &h_src_d, size);
cudaMemcpy(h_src_d, h_src, size, cudaMemcpyHostToDevice);

// Allocate h_dst
cudaMalloc((void**) &h_dst_d, size);

// Kernel invocation code
	// Setup the execution configuration
	unsigned int tw = 16; 		// Tile width, manualy specified
	dim3 Grid(w/tw,w/tw,1); 	// 2D grid
	dim3 Blocks(tw,tw,1);		// 2D bloks
	
	// Launch the computation Threads!
	mF_kernel<<<Grid,Blocks>>>(
		const unsigned char *h_src_d,
        	unsigned char *h_dst_d,
        	unsigned int w,
        	unsigned int h,
        	unsigned int r);

// Transfer h_dst from Device to Host
cudaMemcpy(h_dst, h_dst_d, size, cudaMemcpyDeviceToHost);

// Free device memory
cudaFree(h_src_d);
cudaFree(h_dst_d);
}

__global__ void mF_kernel(
		const unsigned char * h_src_d,
        	unsigned char * h_dst_d,
        	unsigned int w,
        	unsigned int h,
        	unsigned int r);
{
        int real_size, i, j, ii, jj, index;
        float sum, val;
        float median;
        const int tx = blockDim.x*blockIdx.x + threadIdx.x;       // Indices pixels
        const int ty = blockDim.y*blockIdx.y + threadIdx.y;
        
	const int rs = (signed int)r;
	list<unsigned char> mylist;

        if ((tx <= w-1) && (ty <= h-1)){
                unsigned int counter=0;
                for(j =-rs;j <= rs;j++){  
                        for(i =-rs;i <= rs;i++){
                        qy = ty + j; qx = tx + i;
                        if((jj >= 0) && (jj < h) && (ii >= 0) && (ii < w))
                        {
                                mylist.push_back(h_src_d[qy*w+qx]);
                                counter++;
                        }
                }// For
        }
	sort(mylist.begin(), list.end());        
	h_dst[ty*w+tx] = list[list.size()/2];
        }
}
