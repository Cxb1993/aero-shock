Program DG1D_kinetic
use universal_const    ! universal.f90
use Legendre     ! Legendre.f90
use State_Var
use RK_Var
!use Nitsol_Var
implicit none
integer :: nnx ,p ,pp ,rk !,NV   

real(kind=8) :: CFLL ,dx ,dtt ,T, amax, Tau,gamma
 
real(kind=8), allocatable :: ffunc(:) ,temp(:)

real(kind=8), allocatable :: GH(:),GHW(:),ValOfPolyNatGrids(:) 

!real(kind=8) :: func0

real(kind=8) :: RR, UR, PR, TR, ZR
real(kind=8) :: RL, UL, PL, TL, ZL, ET_loc
real(kind=8) :: ratio
real(kind=8) :: xi ,xx ,time_st ,time_end ,ttime=0.d0
integer :: i ,j ,k ,l,m ,ierr ,lid
integer:: ICASE

  !-------- Program Begin ------------------------ 

  lid=22
  open(22,file='in.in',form='formatted',status='old')
  read(lid,*) !=========================!
  read(lid,*) nnx
  read(lid,*) p
  read(lid,*) T
  read(lid,*) IT
  read(lid,*) NV
  read(lid,*) Tau
  read(lid,*) BC_type
  read(lid,*) ICASE
  read(lid,*) ratio
  read(lid,*) !=========================!

write(6,*) "nnx",nnx
write(6,*) "Deg",p
write(6,*) "IT",IT
write(6,*) "NV",NV
write(6,*) "Tau",Tau
write(6,*) "BC", BC_type
write(6,*) "Case", ICASE

  pp=p+1
  rk=pp
  RK_Stage=6
  nx_g=nnx
  pp_g=pp
  
  allocate( xl(1:pp) ,wl(1:pp) ,ffunc(1:pp) ,b(1:pp) ,c(1:pp) ,temp(1:pp) ,stat=ierr)
  if (ierr .ne. 0) then
     write(*,*) "Can't allocate memory for X"
     stop
  endif

  allocate( A(1:pp,1:pp) ,Pleg(1:pp,1:pp),stat=ierr )
  if (ierr .ne. 0) then
     write(*,*) "Can't allocate memory for P"
     stop
  endif

  allocate(GH(NV),GHW(NV),ValOfPolyNatGrids(NV),stat=ierr)

  if (ierr .ne. 0) then
     write(*,*) "Can't allocate memory for GH"
     stop
  endif


  !------- Initialize stage ----------------------

  call init_universal_const
  call Init_Var(NV,nnx,pp,RK_Stage)

  VIS=Tau
  xl=0d0
  wl=0d0
  call gauleg(pp,xl(1:pp),wl(1:pp))
  call legtable(pp,xl(1:pp),p,Pleg(1:pp,1:pp))
!  write(6,*) pp,"xl",xl
!  write(6,*) pp,"wl",wl


  call ZEHEGA( NV, GH, ValOfPolyNatGrids)
  call WEHEGA(NV,GH,GHW)

  V=-GH
  VW=GHW*exp(V**2)

  deallocate( ValOfPolyNatGrids,GH,GHW)
  amax=dabs(V(1))
 
!   write(6,*) "pp",pp
  CFLL=dble(2*p+1)
  CFLL=1d0/CFLL
  dx=dble(nnx)
  dx=1d0/dx
  dtt=dx*CFLL/amax*ratio
  dx_g=dx
  dt_g=dtt
  !------------------------------------------------------
 
  call Init_ARK() !(rk,alpha(1:rk))
 
  !------------------------------------------------------


  gamma = const_a_I(2,1)
  write(*,*) " dt= ",dtt, "gamma",gamma

!------------------------------------------------------
! Initial State
select case (ICASE)
Case(1)
RL=1.0d0
UL=0.75d0
PL=1.0d0

ET_loc=PL+0.5d0*RL*UL**2
TL=4d0*ET_loc/RL-2d0*UL**2
ZL=RL/sqrt(pi*TL)
!          T(i,m)    = 4*ET(i,m)/R(i,m) - 2*U(i,m)^2
!          Z(i,m)    = R(i,m) / sqrt(pi* T(i,m))
!          P(i,m) = ET(i,m) - 0.5 * R(i,m) * U(i,m)^2
RR=0.125d0
UR=0d0
PR=0.1d0

ET_loc=PR+0.5d0*RR*UR**2
TR=4d0*ET_loc/RR-2d0*UR**2
ZR=RR/sqrt(pi*TR)

Case(2)

UL  = 0.d0
TL  = 4.38385d0
ZL  = 0.2253353d0
UR  = 0.d0
TR  = 8.972544d0
ZR  = 0.1204582d0

! Constant State
! UR  = UL
! TR  = TL
! ZR  = ZL
case default
write(6,*) "Case Num",ICASE
stop
end select
  do i=1,nnx
     xi=dble((2*i-1)*dx/2)
!     x((i-1)*pp+1:i*pp)=xi+xl*dx/2d0
      x(i,1:pp)=xi+xl*dx/2d0
    if (xi .lt. 0.5d0) then
     Us(i,:)=UL
     Ts(i,:)=TL
     Zs(i,:)=ZL
else
     Us(i,:)=UR
     Ts(i,:)=TR
     Zs(i,:)=ZR
endif
  enddo
write(6,*) "Init State",nnx,pp,NV

do K=1,NV
  do i=1,nnx

     do m=1,pp
         ffunc(m)=1d0/((exp((V(K)-Us(i,m))**2/Ts(i,m))/Zs(i,m)) + dble(IT))
     enddo
     do j=0,p
        F(K,i,j+1)=sum(ffunc*Pleg(j+1,:)*wl)*(2d0*j+1d0)/2d0
    enddo

  enddo
enddo   

call Comp_RU(nnx,pp)

  !-------------------------------------------------------

  do i=1,pp
     do j=1,pp
        xi=mod((j-i),2)
        if (j>i .and. xi==1 )then
           A(i,j)=2d0
        else
           A(i,j)=0d0
        endif
     enddo
     b(i)=dble((i-0.5)*2/dx)
     c(i)=dble((-1)**(i-1))
  enddo

  call cpu_time(time_st)
  do while (ttime .lt. T) 
!write(6,*) ttime
    if ( (ttime+dtt) .ge. T) then 
     dtt = T-ttime
!     rpar(2)=dtt
     dt_g=dtt
    endif
     Fold=F
     F_new=F
 
    do l=1,RK_Stage
     call DG_flux_arks(nnx,pp,l,dx) 
!     call DG_flux_ark(nnx,pp,l,dx)
!     call DG_flux_and_bdd(nnx,pp,l,dx)
 
!----------------------------------------------------

!     call SSPRK_marching_1D(nnx,pp,l,rk,dtt,alpha(1:rk),u_alt(1:nnx,1:pp),u_t(1:nnx,1:pp),u(1:nnx,1:pp))
!     call ERK_marching_1D(nnx,pp,l,dtt)
     call ARK_marching_1D(nnx,pp,l,dtt)

    enddo ! rk
   ttime = ttime + dtt

F=F_new

     call Comp_RU(nnx,pp)
     call Comp_ZTP(nnx,pp)


  enddo ! do while
  call cpu_time(time_end)
  !---------------------------------------------------------------

  write(*,"(a,1x,1f12.6,1x,a)") "Fortran, cost",time_end-time_st,"s"
  write(*,*) "  T=  ",T
  write(*,*) "  n= ",nnx
  write(*,*) "  p= ",p
  call Data_Output(dtt,nnx,pp)

    
end Program DG1D_kinetic
